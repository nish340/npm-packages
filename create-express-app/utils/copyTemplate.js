const fs = require("fs");
const path = require("path");

function copyRecursive(src, dest) {
  if (!fs.existsSync(dest)) fs.mkdirSync(dest, { recursive: true });

  for (const file of fs.readdirSync(src)) {
    const srcPath = path.join(src, file);
    const destPath = path.join(dest, file);
    const stat = fs.statSync(srcPath);

    if (stat.isDirectory()) {
      copyRecursive(srcPath, destPath);
    } else {
      fs.copyFileSync(srcPath, destPath);
    }
  }
}

function copyTemplate(language, targetDir, options) {
  const baseTemplatePath = path.join(__dirname, "../templates", language);
  copyRecursive(baseTemplatePath, targetDir);

  // Read and modify package.json
  const pkgPath = path.join(targetDir, "package.json");
  const pkg = JSON.parse(fs.readFileSync(pkgPath, "utf-8"));

  // Add optional dependencies
  if (options.morgan) pkg.dependencies["morgan"] = "^1.10.0";
  if (options.helmet) pkg.dependencies["helmet"] = "^7.0.0";
  if (options.jwt) pkg.dependencies["jsonwebtoken"] = "^9.0.0";

  // DB Dependencies
  let dbEnv = "";
  if (options.database === "mongodb") {
    pkg.dependencies["mongoose"] = "^7.5.0";
    dbEnv += "MONGO_URI=mongodb://localhost:27017/mydb\n";
    createMongoDBConfig(targetDir);
    injectConnectDB(targetDir);
  } else if (options.database === "postgresql") {
    pkg.dependencies["pg"] = "^8.11.0";
    dbEnv += "PG_URI=postgres://user:pass@localhost:5432/mydb\n";
    createPostgreSQLConfig(targetDir);
  } else if (options.database === "mysql") {
    pkg.dependencies["mysql2"] = "^3.6.0";
    dbEnv += "MYSQL_URI=mysql://user:pass@localhost:3306/mydb\n";
    createMySQLConfig(targetDir);
  }

  fs.writeFileSync(pkgPath, JSON.stringify(pkg, null, 2));

  // Write .env
  let envContent = `PORT=3000\n${dbEnv}`;
  fs.writeFileSync(path.join(targetDir, ".env"), envContent);

  // README
  fs.writeFileSync(path.join(targetDir, "README.md"), `# ${options.projectName}\nGenerated by create-express-app CLI.`);
}

function createMongoDBConfig(targetDir) {
  const content = `const mongoose = require("mongoose");

async function connectDB() {
  try {
    await mongoose.connect(process.env.MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    console.log("✅ Connected to MongoDB");
  } catch (err) {
    console.error("❌ MongoDB connection failed:", err.message);
    process.exit(1);
  }
}

module.exports = connectDB;
`;
  const dbPath = path.join(targetDir, "src", "utils", "db.js");
  fs.mkdirSync(path.dirname(dbPath), { recursive: true });
  fs.writeFileSync(dbPath, content);
}

function createPostgreSQLConfig(targetDir) {
  const content = `const { Pool } = require("pg");

const pool = new Pool({
  connectionString: process.env.PG_URI,
});

module.exports = pool;
`;
  const dbPath = path.join(targetDir, "src", "utils", "db.js");
  fs.mkdirSync(path.dirname(dbPath), { recursive: true });
  fs.writeFileSync(dbPath, content);
}

function createMySQLConfig(targetDir) {
  const content = `const mysql = require("mysql2");

const connection = mysql.createConnection(process.env.MYSQL_URI);

connection.connect(err => {
  if (err) {
    console.error("❌ MySQL connection failed:", err.message);
    process.exit(1);
  } else {
    console.log("✅ Connected to MySQL");
  }
});

module.exports = connection;
`;
  const dbPath = path.join(targetDir, "src", "utils", "db.js");
  fs.mkdirSync(path.dirname(dbPath), { recursive: true });
  fs.writeFileSync(dbPath, content);
}

function injectConnectDB(targetDir) {
  const indexPath = path.join(targetDir, "src", "index.js");
  let content = fs.readFileSync(indexPath, "utf-8");

  const injectLine = `const connectDB = require("./utils/db");\nconnectDB();\n\n`;
  if (!content.includes("connectDB()")) {
    content = injectLine + content;
    fs.writeFileSync(indexPath, content);
  }
}

module.exports = { copyTemplate };
